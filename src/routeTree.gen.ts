/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as AuthImport } from './routes/auth'
import { Route as AdminImport } from './routes/admin'
import { Route as IndexImport } from './routes/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AuthVerifyEmailImport } from './routes/auth/verify-email'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthForgotPasswordImport } from './routes/auth/forgot-password'
import { Route as AdminUsersImport } from './routes/admin/users'
import { Route as AdminPlacesImport } from './routes/admin/places'
import { Route as AdminCompaniesImport } from './routes/admin/companies'
import { Route as AuthVerifyEmailTokenImport } from './routes/auth/verify-email/$token'
import { Route as AuthResetPasswordTokenImport } from './routes/auth/reset-password/$token'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const AuthVerifyEmailRoute = AuthVerifyEmailImport.update({
  id: '/verify-email',
  path: '/verify-email',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const AdminUsersRoute = AdminUsersImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AdminRoute,
} as any)

const AdminPlacesRoute = AdminPlacesImport.update({
  id: '/places',
  path: '/places',
  getParentRoute: () => AdminRoute,
} as any)

const AdminCompaniesRoute = AdminCompaniesImport.update({
  id: '/companies',
  path: '/companies',
  getParentRoute: () => AdminRoute,
} as any)

const AuthVerifyEmailTokenRoute = AuthVerifyEmailTokenImport.update({
  id: '/$token',
  path: '/$token',
  getParentRoute: () => AuthVerifyEmailRoute,
} as any)

const AuthResetPasswordTokenRoute = AuthResetPasswordTokenImport.update({
  id: '/reset-password/$token',
  path: '/reset-password/$token',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/admin/companies': {
      id: '/admin/companies'
      path: '/companies'
      fullPath: '/admin/companies'
      preLoaderRoute: typeof AdminCompaniesImport
      parentRoute: typeof AdminImport
    }
    '/admin/places': {
      id: '/admin/places'
      path: '/places'
      fullPath: '/admin/places'
      preLoaderRoute: typeof AdminPlacesImport
      parentRoute: typeof AdminImport
    }
    '/admin/users': {
      id: '/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersImport
      parentRoute: typeof AdminImport
    }
    '/auth/forgot-password': {
      id: '/auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof AuthImport
    }
    '/auth/verify-email': {
      id: '/auth/verify-email'
      path: '/verify-email'
      fullPath: '/auth/verify-email'
      preLoaderRoute: typeof AuthVerifyEmailImport
      parentRoute: typeof AuthImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/auth/reset-password/$token': {
      id: '/auth/reset-password/$token'
      path: '/reset-password/$token'
      fullPath: '/auth/reset-password/$token'
      preLoaderRoute: typeof AuthResetPasswordTokenImport
      parentRoute: typeof AuthImport
    }
    '/auth/verify-email/$token': {
      id: '/auth/verify-email/$token'
      path: '/$token'
      fullPath: '/auth/verify-email/$token'
      preLoaderRoute: typeof AuthVerifyEmailTokenImport
      parentRoute: typeof AuthVerifyEmailImport
    }
  }
}

// Create and export the route tree

interface AdminRouteChildren {
  AdminCompaniesRoute: typeof AdminCompaniesRoute
  AdminPlacesRoute: typeof AdminPlacesRoute
  AdminUsersRoute: typeof AdminUsersRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminCompaniesRoute: AdminCompaniesRoute,
  AdminPlacesRoute: AdminPlacesRoute,
  AdminUsersRoute: AdminUsersRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

interface AuthVerifyEmailRouteChildren {
  AuthVerifyEmailTokenRoute: typeof AuthVerifyEmailTokenRoute
}

const AuthVerifyEmailRouteChildren: AuthVerifyEmailRouteChildren = {
  AuthVerifyEmailTokenRoute: AuthVerifyEmailTokenRoute,
}

const AuthVerifyEmailRouteWithChildren = AuthVerifyEmailRoute._addFileChildren(
  AuthVerifyEmailRouteChildren,
)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignupRoute: typeof AuthSignupRoute
  AuthVerifyEmailRoute: typeof AuthVerifyEmailRouteWithChildren
  AuthResetPasswordTokenRoute: typeof AuthResetPasswordTokenRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignupRoute: AuthSignupRoute,
  AuthVerifyEmailRoute: AuthVerifyEmailRouteWithChildren,
  AuthResetPasswordTokenRoute: AuthResetPasswordTokenRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/admin/companies': typeof AdminCompaniesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/auth/reset-password/$token': typeof AuthResetPasswordTokenRoute
  '/auth/verify-email/$token': typeof AuthVerifyEmailTokenRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/admin/companies': typeof AdminCompaniesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRouteWithChildren
  '/admin': typeof AdminIndexRoute
  '/auth/reset-password/$token': typeof AuthResetPasswordTokenRoute
  '/auth/verify-email/$token': typeof AuthVerifyEmailTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/auth': typeof AuthRouteWithChildren
  '/dashboard': typeof DashboardRoute
  '/admin/companies': typeof AdminCompaniesRoute
  '/admin/places': typeof AdminPlacesRoute
  '/admin/users': typeof AdminUsersRoute
  '/auth/forgot-password': typeof AuthForgotPasswordRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/signup': typeof AuthSignupRoute
  '/auth/verify-email': typeof AuthVerifyEmailRouteWithChildren
  '/admin/': typeof AdminIndexRoute
  '/auth/reset-password/$token': typeof AuthResetPasswordTokenRoute
  '/auth/verify-email/$token': typeof AuthVerifyEmailTokenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/auth'
    | '/dashboard'
    | '/admin/companies'
    | '/admin/places'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/admin/'
    | '/auth/reset-password/$token'
    | '/auth/verify-email/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/dashboard'
    | '/admin/companies'
    | '/admin/places'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/admin'
    | '/auth/reset-password/$token'
    | '/auth/verify-email/$token'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/auth'
    | '/dashboard'
    | '/admin/companies'
    | '/admin/places'
    | '/admin/users'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/signup'
    | '/auth/verify-email'
    | '/admin/'
    | '/auth/reset-password/$token'
    | '/auth/verify-email/$token'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
  DashboardRoute: typeof DashboardRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
  DashboardRoute: DashboardRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/admin",
        "/auth",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/admin": {
      "filePath": "admin.tsx",
      "children": [
        "/admin/companies",
        "/admin/places",
        "/admin/users",
        "/admin/"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx",
      "children": [
        "/auth/forgot-password",
        "/auth/login",
        "/auth/signup",
        "/auth/verify-email",
        "/auth/reset-password/$token"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/admin/companies": {
      "filePath": "admin/companies.tsx",
      "parent": "/admin"
    },
    "/admin/places": {
      "filePath": "admin/places.tsx",
      "parent": "/admin"
    },
    "/admin/users": {
      "filePath": "admin/users.tsx",
      "parent": "/admin"
    },
    "/auth/forgot-password": {
      "filePath": "auth/forgot-password.tsx",
      "parent": "/auth"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx",
      "parent": "/auth"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx",
      "parent": "/auth"
    },
    "/auth/verify-email": {
      "filePath": "auth/verify-email.tsx",
      "parent": "/auth",
      "children": [
        "/auth/verify-email/$token"
      ]
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/auth/reset-password/$token": {
      "filePath": "auth/reset-password/$token.tsx",
      "parent": "/auth"
    },
    "/auth/verify-email/$token": {
      "filePath": "auth/verify-email/$token.tsx",
      "parent": "/auth/verify-email"
    }
  }
}
ROUTE_MANIFEST_END */
